name: Build DMG

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allows manual trigger from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v3
    
    # Install the Apple certificate and provisioning profile
    - name: Install Apple Certificate
      env:
        MACOS_CERTIFICATE_P12: ${{ secrets.MACOS_CERTIFICATE_P12 }}
        MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

        echo "$MACOS_CERTIFICATE_P12" | base64 --decode > certificate.p12

        security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign

        security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

        security find-identity -v -p codesigning build.keychain
    
    # Build the macOS app using xcodebuild
    - name: Build macOS App
      env:
        DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer
        CODE_SIGN_IDENTITY: ${{ vars.CODE_SIGN_IDENTITY || 'Developer ID Application' }}
        DEVELOPMENT_TEAM: ${{ vars.DEVELOPMENT_TEAM || 'NXWD68TXUQ' }}
        CI_EXPORT_OPTIONS_PLIST: 'ciExportOptions.plist'
      run: |
        xcodebuild -scheme "openterface" \
          -configuration Release \
          -archivePath "build/Openterface.xcarchive" \
          archive \
          CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
          CODE_SIGN_STYLE="Manual" \
          DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM"

        # Create a new export options plist with values from GitHub Action variables since
        # these parameters cannot be overwritten in the command line
        echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$CI_EXPORT_OPTIONS_PLIST"
        echo "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">" >> "$CI_EXPORT_OPTIONS_PLIST"
        echo "<plist version=\"1.0\">" >> "$CI_EXPORT_OPTIONS_PLIST"
        echo "<dict>" >> "$CI_EXPORT_OPTIONS_PLIST"
        echo "    <key>method</key>" >> "$CI_EXPORT_OPTIONS_PLIST"
        echo "    <string>developer-id</string>" >> "$CI_EXPORT_OPTIONS_PLIST"
        echo "    <key>teamID</key>" >> "$CI_EXPORT_OPTIONS_PLIST"
        echo "    <string>$DEVELOPMENT_TEAM</string>" >> "$CI_EXPORT_OPTIONS_PLIST"
        echo "    <key>signingStyle</key>" >> "$CI_EXPORT_OPTIONS_PLIST"
        echo "    <string>manual</string>" >> "$CI_EXPORT_OPTIONS_PLIST"
        echo "    <key>signingCertificate</key>" >> "$CI_EXPORT_OPTIONS_PLIST"
        echo "    <string>$CODE_SIGN_IDENTITY</string>" >> "$CI_EXPORT_OPTIONS_PLIST"
        echo "</dict>" >> "$CI_EXPORT_OPTIONS_PLIST"
        echo "</plist>" >> "$CI_EXPORT_OPTIONS_PLIST"

        echo "--- Export options for CI ---"
        cat "$CI_EXPORT_OPTIONS_PLIST"
        echo "-----------------------------"

        # Use the export options plist created above as the export options
        # Leaves the original one in the repository untouched
        xcodebuild -exportArchive \
          -archivePath "build/Openterface.xcarchive" \
          -exportPath "build/export" \
          -exportOptionsPlist "$CI_EXPORT_OPTIONS_PLIST"

    # Notarize the app
    - name: Notarize App
      # main branch only
      if: github.ref == 'refs/heads/master'
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        DEVELOPMENT_TEAM: ${{ vars.DEVELOPMENT_TEAM || 'NXWD68TXUQ' }}
      run: |
        # Create temporary keychain
        xcrun notarytool store-credentials "notarytool-profile" \
          --apple-id "$APPLE_ID" \
          --password "$APPLE_APP_SPECIFIC_PASSWORD" \
          --team-id "$DEVELOPMENT_TEAM"
        
        # Submit app for notarization
        xcrun notarytool submit "build/export/Openterface.app" \
          --keychain-profile "notarytool-profile" \
          --wait
        
        # Staple the notarization ticket
        xcrun stapler staple "build/export/Openterface.app"

    # Create DMG using create-dmg
    - name: Install create-dmg
      run: brew install create-dmg

    - name: Create DMG
      run: |
        create-dmg \
          --volname "Openterface" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "Openterface.app" 200 190 \
          --hide-extension "Openterface.app" \
          --app-drop-link 600 185 \
          "build/Openterface.dmg" \
          "build/export/Openterface.app"
        
    # Upload DMG as artifact
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: Openterface-dmg
        path: build/*.dmg
        
    # Create a release if tagged
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: build/*.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node- 

    - name: Debug Certificates
      run: |
        security find-identity -v -p codesigning
        security list-keychains
        security show-keychain-info build.keychain